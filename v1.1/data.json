{
    "project": {
        "name": "hoon",
        "description": "JavaScript utility library.",
        "version": "1.1",
        "url": "https://github.com/TsukimiShion/hoon"
    },
    "files": {
        "src/hoon.js": {
            "name": "src/hoon.js",
            "modules": {},
            "classes": {
                "hoon": 1,
                "hoon.json": 1,
                "hoon.WebStorage": 1
            },
            "fors": {},
            "namespaces": {
                "hoon": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "hoon": {
            "name": "hoon",
            "shortname": "hoon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/hoon.js",
            "line": 4,
            "static": 1
        },
        "hoon.json": {
            "name": "hoon.json",
            "shortname": "hoon.json",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "hoon",
            "file": "src/hoon.js",
            "line": 266,
            "description": "[JSON](http://www.json.org/) does not consider the following elements.\n- NaN\n- undefined\n- RegExp object\n\nWe expect typically ``` JSON.parse(JSON.stringify(A)) ``` is equal to ``` A ``` , but the following code does not work as expected.\n```javascript\nJSON.parse(JSON.stringify(undefined)); // SyntaxError\nJSON.parse(JSON.stringify(NaN)); // null\nJSON.parse(JSON.stringify(/ab/)); // {}\nJSON.parse(JSON.stringify({name: undefined})); // {}\n```\nSo the goal of hoon.json is that ``` hoon.json.parse(hoon.json.stringify(A)) ``` is equal to ``` A ``` , that is,\n```javascript\nhoon.json.parse(hoon.json.stringify(undefined)); // undefined\nhoon.json.parse(hoon.json.stringify(NaN)); // NaN\nhoon.json.parse(hoon.json.stringify(/ab/)); // /ab/\nhoon.json.parse(hoon.json.stringify(0)); // 0\nhoon.json.parse(hoon.json.stringify(\"undefined\")); // \"undefined\"\nhoon.json.parse(hoon.json.stringify({0: NaN, 1: undefined, 2: /ab/, 3: \"undefined\"})); // {0: NaN, 1: undefined, 2: /ab/, 3: \"undefined\"}\n```",
            "static": 1
        },
        "hoon.WebStorage": {
            "name": "hoon.WebStorage",
            "shortname": "hoon.WebStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "hoon",
            "file": "src/hoon.js",
            "line": 374,
            "description": "The Base Class of hoon.localStorage and hoon.sessionStorage.\nYou cannot access this class.\n\nThis class extends the [Storage Interface](http://dev.w3.org/html5/webstorage/#the-storage-interface).\nIn the Storage interface, you must typically use the JSON object for parsing and serializing. On the other hand, in this class you don't have to use the JSON object. This class internally parses and serializes data using the hoon.json object.\n\nAdditionally, this class provides **get**, **set** and **remove** methods for operating multiple keys.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "webstorage",
                    "description": "",
                    "type": "LocalStorage|sessionStorage"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/hoon.js",
            "line": 12,
            "description": "Extract object's properties and return the new object.",
            "itemtype": "method",
            "name": "extract",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "extract",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n    // ex1\n    var obj = { 0:0, 1:1, 2:2, 3:3 };\n    var ret = hoon.extract(obj, function(val, key){\n        return (key % 2) == 0;\n    });\n    console.log(ret); // { 0:0, 2:2 }\n    console.log(obj); // { 0:0, 1:1, 2:2, 3:3 };",
                "\n    // ex2\n    var obj = { 0:0, 1:1, 2:2, 3:3 };\n    var ret = hoon.extract(obj, function(val){\n        return val < 2;\n    });\n    console.log(ret); // { 0:0, 1:1 }\n    console.log(obj); // { 0:0, 1:1, 2:2, 3:3 };",
                "\n    // ex3\n    var obj = { 0:0, 1:1, 2:2, 3:3 };\n    var ret = hoon.extract(obj, function(val){\n        return val > 3;\n    });\n    console.log(ret); // {}\n    console.log(obj); // { 0:0, 1:1, 2:2, 3:3 };\n"
            ],
            "class": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 57,
            "description": "Extract object's properties, convert and return the new object.\n\n**fmap = filter + map**",
            "itemtype": "method",
            "name": "fmap",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "fmap",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n    // ex1\n    var obj = { 0:0, 1:1, 2:2, 3:3 };\n    var ret = hoon.fmap(obj, function(val, key){\n        if ((key % 2) === 1){\n            return [key, key * val];\n        }\n    });\n    console.log(ret); // { 1:1, 3:9 }\n    console.log(obj); // { 0:0, 1:1, 2:2, 3:3 };",
                "\n    // ex2\n    var obj = { 0:0, 1:1, 2:2, 3:3 };\n    var ret = hoon.fmap(obj, function(val){\n        if (val > 3){\n            return [key, val];\n        }\n    });\n    console.log(ret); // {}\n    console.log(obj); // { 0:0, 1:1, 2:2, 3:3 };",
                "\n    // ex3\n    var obj = {};\n    var ret = hoon.fmap(obj, function(val, key){\n        if (val > 3){\n            return [key, val];\n        }\n    });\n    console.log(ret); // {}\n    console.log(obj); // {}"
            ],
            "class": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 110,
            "description": "Pad a string with given characters.",
            "itemtype": "method",
            "name": "padding",
            "params": [
                {
                    "name": "str",
                    "description": "A padded string.",
                    "type": "String"
                },
                {
                    "name": "len",
                    "description": "The max length of the return value.",
                    "type": "Integer"
                },
                {
                    "name": "char",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "flag",
                    "description": "If flag is true, str is padded to the rigtht, else left.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n    // ex1\n    var ret = hoon.padding(\"5\", 3, \"0\");\n    console.log(ret); // \"005\"",
                "\n    // ex2\n    var ret = hoon.padding(\"hello\", 13, \"<*>\", true);\n    console.log(ret); // \"hello<*><*>\""
            ],
            "class": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 146,
            "description": "Union sources's properties and return the new object.\nUnlike [underscore's extend](http://underscorejs.org/#extend),\nthe first argument is not changed.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "*sources",
                    "description": "This method is passed the arbitary number of objects as arguments.\nIt's in-order, so the last source will override properties of the same name in previous arguments.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n    // ex1\n    var s1 = {0:0, 1:1, 2:2};\n    var s2 = {1:3, 2:5, 3:3, 4:4};\n    var s3 = {2:7, 5:8};\n    var ret = hoon.extend(s1, s2, s3);\n    console.log(ret); // {0:0, 1:3, 2:7, 3:3, 4:4, 5:8}\n    console.log(s1); // {0:0, 1:1, 2:2}\n    console.log(s2); // {1:3, 2:5, 3:3, 4:4}\n    console.log(s3); // {2:7, 5:8}",
                "\n    // ex2\n    console.log(hoon.extend()); // {}"
            ],
            "class": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 183,
            "description": "The helper method of [underscore's template](http://underscorejs.org/#template).",
            "itemtype": "method",
            "name": "templates",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n    // ex1\n    var ret = hoon.templates({\n        hello: \"Hello, <%= name %>.\",\n        date, \"<%= month %>/<%= day %>\",\n    });\n    console.log(ret.hello({name: \"John\"})); // Hello, John.\n    console.log(ret.date({month: 10, day: 12})); // 10/12",
                "\n    // ex2\n    var ret = hoon.templates({}); // {}"
            ],
            "class": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 210,
            "description": "Return the pseudo deep clone of the argument.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "obj",
                    "description": "obj must be comprise of the following objects.\n- literal number(ex: 1)\n- literal string(ex: \"hello\")\n- undefined, null, NaN\n- true, false\n- Boolean, Number, String, RegExp, Date, Array, Object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The deep clone of the argument.",
                "type": "Object"
            },
            "example": [
                "\n    // ex1\n    var obj = {0:{1:1}};\n    var ret = hoon.clone(obj);\n    console.log(obj); // {0:{1:1}};\n    console.log(ret); // {0:{1:1}};\n    ret[0][1] = 3;\n    console.log(obj); // {0:{1:1}};\n    console.log(ret); // {0:{1:3}};\n"
            ],
            "class": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 296,
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String|null"
                }
            ],
            "example": [
                "\n     hoon.json.parse(hoon.json.stringify(undefined)); // undefined\n     hoon.json.parse(hoon.json.stringify(NaN)); // NaN\n     hoon.json.parse(hoon.json.stringify(/ab/)); // /ab/\n     hoon.json.parse(hoon.json.stringify(0)); // 0\n     hoon.json.parse(hoon.json.stringify(\"undefined\")); // \"undefined\"\n     hoon.json.parse(hoon.json.stringify({0: NaN, 1: undefined, 2: /ab/, 3: \"undefined\"})); // {0: NaN, 1: undefined, 2: /ab/, 3: \"undefined\"}"
            ],
            "class": "hoon.json",
            "namespace": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 344,
            "itemtype": "method",
            "name": "stringify",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String|null"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n     hoon.json.parse(hoon.json.stringify(undefined)); // undefined\n     hoon.json.parse(hoon.json.stringify(NaN)); // NaN\n     hoon.json.parse(hoon.json.stringify(/ab/)); // /ab/\n     hoon.json.parse(hoon.json.stringify(0)); // 0\n     hoon.json.parse(hoon.json.stringify(\"undefined\")); // \"undefined\"\n     hoon.json.parse(hoon.json.stringify({0: NaN, 1: undefined, 2: /ab/, 3: \"undefined\"})); // {0: NaN, 1: undefined, 2: /ab/, 3: \"undefined\"}"
            ],
            "class": "hoon.json",
            "namespace": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 390,
            "description": "return the current value associated with the given key.\nIf the given key does not exist in the list associated with the object \nthen this method must return null.\n\n> Warning: The following methods must be used together.\n> - WebStorage.set()\n> - WebStorage.get()\n> - WebStorage.setItem()\n> - WebStorage.getItem()\n> \n> For example, the following code doesn't work as expected.\n> ```javascript\n> localStorage.setItem(\"name\", \"John\");\n> var name = hoon.localStorage.getItem(\"name\", \"John\");\n> ```\n> Otherwise, the following code works as expected.\n> ```javascript\n> hoon.localStorage.setItem(\"name\", \"John\");\n> var name = hoon.localStorage.getItem(\"name\", \"John\");\n> ```",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the current value associated with the given key."
            },
            "example": [
                "\n    hoon.localStorage.setItem(\"obj\", {\n        name: \"John\",\n        number: 1,\n    });\n    var obj = hoon.localStorage.getItem(\"obj\");\n    console.log();"
            ],
            "class": "hoon.WebStorage",
            "namespace": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 427,
            "description": "> Warning: The following methods must be used together.\n> - WebStorage.set()\n> - WebStorage.get()\n> - WebStorage.setItem()\n> - WebStorage.getItem()\n> \n> For example, the following code doesn't work as expected.\n> ```javascript\n> localStorage.setItem(\"name\", \"John\");\n> var name = hoon.localStorage.getItem(\"name\", \"John\");\n> ```\n> Otherwise, the following code works as expected.\n> ```javascript\n> hoon.localStorage.setItem(\"name\", \"John\");\n> var name = hoon.localStorage.getItem(\"name\", \"John\");\n> ```",
            "itemtype": "method",
            "name": "setItem",
            "return": {
                "description": "undefined"
            },
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "example": [
                "\n    hoon.localStorage.setItem(\"obj\", {\n        name: \"John\",\n        number: 1,\n    });\n    var obj = hoon.localStorage.getItem(\"obj\");\n    console.log();"
            ],
            "class": "hoon.WebStorage",
            "namespace": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 461,
            "description": "This method is equivalent to ``` webstorage.removeItem(key) ``` .",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "\n    hoon.localStorage.setItem(\"name\", \"John\");\n    hoon.localStorage.removeItem(\"name\");"
            ],
            "class": "hoon.WebStorage",
            "namespace": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 473,
            "description": "This method is equivalent to ``` webstorage.clear() ``` .",
            "itemtype": "method",
            "name": "clear",
            "example": [
                "\n    hoon.localStorage.setItem(\"name\", \"John\");\n    hoon.localStorage.clear();"
            ],
            "class": "hoon.WebStorage",
            "namespace": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 484,
            "description": "This method is equivalent to ``` webstorage.key(n) ``` .",
            "itemtype": "method",
            "name": "key",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n    hoon.clear();\n    hoon.localStorage.setItem(\"name\", \"John\");\n    console.log(hoon.localStorage.key(0)); // \"name\""
            ],
            "class": "hoon.WebStorage",
            "namespace": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 497,
            "description": "> Warning: The following methods must be used together.\n> - WebStorage.set()\n> - WebStorage.get()\n> - WebStorage.setItem()\n> - WebStorage.getItem()\n> \n> For example, the following code doesn't work as expected.\n> ```javascript\n> localStorage.setItem(\"name\", \"John\");\n> var name = hoon.localStorage.getItem(\"name\", \"John\");\n> ```\n> Otherwise, the following code works as expected.\n> ```javascript\n> hoon.localStorage.setItem(\"name\", \"John\");\n> var name = hoon.localStorage.getItem(\"name\", \"John\");\n> ```",
            "itemtype": "method",
            "name": "set",
            "example": [
                "\n    // equivalent to hoon.localStorage.setItem(\"name\", \"John\");\n    hoon.localStorage.set(\"name\", \"John\");\n\n    hoon.localStorage.set({\n        name: \"John\",\n        number: 1,\n    });"
            ],
            "class": "hoon.WebStorage",
            "namespace": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 536,
            "description": "> Warning: The following methods must be used together.\n> - WebStorage.set()\n> - WebStorage.get()\n> - WebStorage.setItem()\n> - WebStorage.getItem()\n> \n> For example, the following code doesn't work as expected.\n> ```javascript\n> localStorage.setItem(\"name\", \"John\");\n> var name = hoon.localStorage.getItem(\"name\", \"John\");\n> ```\n> Otherwise, the following code works as expected.\n> ```javascript\n> hoon.localStorage.setItem(\"name\", \"John\");\n> var name = hoon.localStorage.getItem(\"name\", \"John\");\n> ```",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "keys",
                    "description": "",
                    "type": "Null|Array of String|String"
                }
            ],
            "example": [
                "\n    hoon.localStorage.set({ name: \"John\", id: -1 });\n    // equivalent to hoon.localStorage.getItem(\"name\");\n    hoon.localStorage.get(\"name\"); // \"John\"\n    hoon.localStorage.get([\"name\", \"id\"]); // { name: \"John\", id: -1 }\n    hoon.localStorage.get(); // { name: \"John\", id: -1 }\n    // equivalent to hoon.localStorage.get();\n    hoon.localStorage.get(null); // { name: \"John\", id: -1 }"
            ],
            "class": "hoon.WebStorage",
            "namespace": "hoon"
        },
        {
            "file": "src/hoon.js",
            "line": 586,
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "keys",
                    "description": "",
                    "type": "Null|Array of String|String"
                }
            ],
            "example": [
                "\n     hoon.localStorage.remove(\"name\"); // equivalent to localStorage.removeItem(\"name\");\n     hoon.localStorage.remove([\"name\", \"id\"]);\n     hoon.localStorage.remove(); // equivalent to localStorage.clear();\n     hoon.localStorage.remove(null); // equivalent to localStorage.clear();"
            ],
            "class": "hoon.WebStorage",
            "namespace": "hoon"
        }
    ],
    "warnings": []
}